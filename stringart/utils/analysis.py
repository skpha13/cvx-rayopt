import time
import tracemalloc
from dataclasses import dataclass
from typing import Callable

import numpy as np
from stringart.utils.time_and_memory_utils import (
    ElapsedTime,
    MemorySize,
    convert_memory_size,
    convert_monotonic_time,
    format_memory_size,
    format_time,
)


@dataclass
class BenchmarkResult:
    """A dataclass that stores the results of a benchmark, including the output image,
    elapsed time, and peak memory usage.

    Attributes
    ----------
    output_image : np.ndarray
        The image output generated by the benchmarked function.
    elapsed_monotonic_time : float
        The elapsed time in seconds measured with `time.monotonic()`.
    peak_memory_usage : int
        The peak memory usage in bytes measured by `tracemalloc.get_traced_memory()`.
    elapsed_time : ElapsedTime
        The elapsed time as a dictionary containing hours, minutes, seconds, and milliseconds.
    peak_memory_size : MemorySize
        The peak memory usage as a dictionary containing gigabytes, megabytes, kilobytes, and bytes.
    """

    output_image: np.ndarray
    elapsed_monotonic_time: float
    peak_memory_usage: int

    elapsed_time: ElapsedTime
    peak_memory_size: MemorySize

    def __str__(self):
        formatted_time = format_time(self.elapsed_time)
        formatted_memory = format_memory_size(self.peak_memory_size)

        return (
            f"Benchmark Results:\n"
            f"- Elapsed Time: {formatted_time}\n"
            f"- Peak Memory Usage: {formatted_memory}\n"
            f"- Output Image Shape: {self.output_image.shape}"
        )


def benchmark(func: Callable, *args, **kwargs) -> BenchmarkResult:
    """Benchmark a function by measuring its execution time and peak memory usage.

    Parameters
    ----------
    func : Callable
       The function to be benchmarked.
    *args : tuple
       Positional arguments passed to the function.
    **kwargs : dict
       Keyword arguments passed to the function.

    Returns
    -------
    BenchmarkResult
       A BenchmarkResult instance containing the output of the function,
       elapsed time, and peak memory usage.
    """

    time_start = time.monotonic()
    tracemalloc.start()

    output = func(*args, **kwargs)

    time_end = time.monotonic()
    elapsed_monotonic_time = time_end - time_start

    _, peak_memory_usage = tracemalloc.get_traced_memory()
    tracemalloc.stop()

    elapsed_time: ElapsedTime = convert_monotonic_time(elapsed_monotonic_time)
    peak_memory_size: MemorySize = convert_memory_size(peak_memory_usage)

    return BenchmarkResult(
        output_image=output,
        elapsed_monotonic_time=elapsed_monotonic_time,
        peak_memory_usage=peak_memory_usage,
        elapsed_time=elapsed_time,
        peak_memory_size=peak_memory_size,
    )
